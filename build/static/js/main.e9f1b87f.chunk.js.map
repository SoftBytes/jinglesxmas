{"version":3,"sources":["treesForm/trees.js","colorConsts.js","treesForm/treeTile/styles.js","treesForm/treeTile/index.js","treesForm/checkbox/styles.js","treesForm/checkbox/index.js","treesForm/datesField/styles.js","treesForm/datesField/index.js","treesForm/postCodeInput/styles.js","treesForm/postCodeInput/index.js","treesForm/additionalItems.js","treesForm/zones.js","treesForm/styles.js","treesForm/index.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["TREES","name","height","price","key","selected","RED","CTA","treeTile","css","_templateObject","activeClass","_templateObject2","bigTree","_templateObject3","title","_templateObject4","hr","_templateObject5","TreeTile","_ref","_classNames","_ref$tree","tree","selectTree","_tree$height","_tree$price","tilesClasses","classNames","Object","defineProperty","styles","react_default","a","createElement","Fragment","className","onClick","concat","input","styles_templateObject","Checkbox","_ref$type","type","_ref$checked","checked","_ref$disabled","disabled","onChange","datesField_styles_templateObject","calendar","styles_templateObject2","DatesField","props","_this","classCallCheck","this","_super","call","isBlocked","availableDays","day","find","d","date","deliveryDate","state","focused","daySize","onDateChange","bind","assertThisInitialized","onFocusChange","window","addEventListener","resize","newSize","innerWidth","setState","removeEventListener","prevProps","onDeliveryDateChange","_this2","_this$state","_this$props$available","react_dates","numberOfMonths","initialVisibleMonth","moment","isDayBlocked","noNavButtons","hideKeyboardShortcutsPanel","React","Component","postcode","postCodeInput_styles_templateObject","label","postCodeInput_styles_templateObject2","error","styles_templateObject3","PostCodeInput","handleChange","event","number","Number","target","value","onPostCodeChange","isNaN","valid","isMissingPostcode","postCodeEnum","postcodes","c","code","areaSurcharge","zone","pattern","maxLength","minLength","placeholder","href","ADDITIONAL_ITEMS","large","ZONES","C2","availableDates","SE","SE1","N","N1","WN","WN1","S","S1","W","W1","fetchPostCodesFromJson","postcodes_json","map","p","surcharge","console","dir","tilesWpap","treesForm_styles_templateObject","checkboxesWpap","treesForm_styles_templateObject2","checkboxLabel","treesForm_styles_templateObject3","styles_templateObject4","h2","styles_templateObject5","boxWpap","_templateObject6","cta","_templateObject7","subTextGreen","_templateObject8","TreesForm","defaultTree","defaultAdditionalSelection","trees","selectedTree","checkedItemsSet","Set","disabledItemsSet","total","dateSurcharge","postCode","isFormValid","formErrorMessage","onAdditionalItemsChange","onSubmit","item","objectSpread2","getTotal","_this3","_ref$checkedItems","checkedItems","toConsumableArray","_ref$dateSurcharge","_ref$areaSurcharge","additinalItemsPrice","reduce","sum","isAddedItemLargeStand","areaPrice","datePrice","_this4","_this5","prevPostCode","newDeliveryDate","e","_this6","_this$state2","_e$target","itemKey","isChecked","i","add","delete","updateInstallation","includes","installation","_ref2","slice","_this7","preventDefault","log","addOns","deliveryDay","area","_this8","_this$state3","treesList","treesForm_treeTile","checkboxes","labelText","getLabelText","treesForm_checkbox","has","method","action","formatAdditionalItemsNames","formatDate","formatArea","postCodeInput_PostCodeInput","datesField_DatesField","pageWpap","src_styles_templateObject","specialOffer","src_styles_templateObject2","subTextRed","src_styles_templateObject3","src_styles_templateObject4","h1","src_styles_templateObject5","car","styles_templateObject6","App","done","undefined","setTimeout","anchor","document","getElementsByName","scrollIntoView","behavior","scrollToForm","treesForm","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9f1b87f.chunk.js","sourcesContent":["export const STANDARD_TREE_NAME = 'Standard'\nexport const LARGE_TREE_NAME = 'Large'\n\n// prod_IJj7l2rVzMfaXC\tTree 6\n// prod_IJj4eyw0urKfb1\tTree 7\n\nexport const TREES = [{\n        name: STANDARD_TREE_NAME,\n        height: '1.8m',\n        price: 109,\n        key: 'prod_IJj7l2rVzMfaXC',\n        selected: true,\n    },{\n        name: LARGE_TREE_NAME,\n        height: '2.1m',\n        price: 139,\n        key: 'prod_IJj4eyw0urKfb1',\n    }]","export const RED = '#ff1212'\nexport const PALE_GREEN = '#f4f5eb'\nexport const CTA = '#6e9366'\nexport const DARK_GREEN = '#2b4432'\nexport const YELLOW = '#ffffa5'\n\n","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const treeTile = css`\n  width: 46%;\n  background-color: #fdecd3;\n  padding: .5em 0 .5em 2.6em;\n  box-sizing: border-box;\n  border-radius: 6px;\n  box-shadow: 2px 2px 2px #ddd;\n  text-align: center;\n  font-size: 0.6em;\n  margin: 0.5em;\n\n  background-image: url(\"./images/tree_card.png\"); \n  background-repeat: no-repeat;\n  background-size: 3.1em;\n  background-position: left 1em bottom .8em;\n\n  @media (min-width: 375px) {\n    font-size: 0.8em;\n  }\n\n  @media (min-width: 768px) {\n    width: 300px;\n    margin: 1em;\n  }\n`\n\nexport const activeClass = css`\n  border: 1px solid ${RED};\n  label {\n    font-weight: 600;\n  }\n`\n\nexport const bigTree = css`\n  background-size: 3.6em;\n`\n\nexport const title = css`\n  color: ${RED};\n  font-weight: 500;\n\n  font-size: 16px;\n\n  @media (min-width: 375px) {\n    font-size: 18px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.5em;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n  margin: 0 20px;\n\n  @media (min-width: 375px) {\n    margin: 0 40px;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 4em;\n  }\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport * as trees from '../trees'\nimport * as styles from './styles'\n\nexport const TreeTile = ({ tree = {}, selectTree }) => {\n\n  const {\n    name,\n    height = '',\n    price = '',\n    selected,\n  } = tree\n\n  let tilesClasses = classNames({\n    [styles.treeTile] : true,\n    [styles.activeClass] : !!selected,\n    [styles.bigTree]: name === trees.LARGE_TREE_NAME,\n  })\n\n  return (\n    <>\n      <div className={tilesClasses} \n          onClick={() => {selectTree(tree)}}\n      >\n        <label className={styles.title}>{name}</label>\n        <div>{height}</div>\n        <hr className={styles.hr}/>\n        <div>{`$${price}`}</div>\n      </div>\n    </>\n  )\n}\n\nexport default TreeTile\n\nTreeTile.propTypes = {\n  tree: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  selectTree: PropTypes.func,\n}\n","import { css } from 'emotion'\n\nexport const input = css`\n  margin-right: 0.4em;\n`\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nconst Checkbox = ({ \n  type = 'checkbox', \n  name, \n  checked = false, \n  disabled = false,\n  onChange,\n}) => { \n  return (\n    <input \n      className={styles.input}\n      type={type} \n      name={name} \n      checked={checked} \n      disabled={disabled}\n      onChange={onChange} \n    />\n  )\n}\n\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const datesSelect = css`\n  border: 1px solid ${CTA};\n  color: ${RED} !important;\n  line-height: 1.3;\n  padding: .6em 1.4em .5em .8em;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border: 1px solid #aaa;\n  box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 80%;\n    max-width: 80%;\n  }\n\n`\n\nexport const calendar = css`\n  \n    td.CalendarDay__selected, \n    td.CalendarDay__selected:active, \n    td.CalendarDay__selected:hover {\n        border: 1px double ${CTA} !important;\n        background: ${CTA} !important;\n    }\n\n    .DayPicker {\n        margin: .6em auto 1em;\n    }\n\n    label {\n        color: ${CTA};\n        margin: .6em auto;\n        font-size: 1.2em;\n    }\n\n    margin: 1em auto 0;\n    text-align: center;\n\n`\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { DayPickerSingleDateController } from 'react-dates'\nimport moment from 'moment'\nimport * as styles from './styles'\n\nexport default class DatesField extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const { deliveryDate } = this.props\n\n    this.state = {\n      date: deliveryDate,\n      focused: true,\n      daySize: 35,\n    }\n\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    const { daySize } = this.state\n    let newSize = daySize\n    if ( window.innerWidth <= 325 ) {\n      newSize = 29\n    } else if ( window.innerWidth < 400 ) {\n      newSize = 35\n    } else {\n      newSize = 39\n    }\n    \n    if (daySize === newSize) {\n      return\n    }\n    this.setState({ daySize: newSize })\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.deliveryDate !== prevProps.deliveryDate) {\n      this.setState({ \n        date: this.props.deliveryDate\n      })\n    }\n  }\n\n  onDateChange(date) {\n    const { onDeliveryDateChange } = this.props\n    onDeliveryDateChange(date)\n    this.setState({ date })\n  }\n\n  onFocusChange() {\n    // Force the focused states to always be truthy so that date is always selectable\n    this.setState({ focused: true })\n  }\n\n  isBlocked = (availableDays, day) => {\n    return !availableDays.find(d => d === day.date())\n  }\n\n  render() {\n    const { focused, daySize, date } = this.state\n    const { availableDays = [] } = this.props\n    const isDayBlocked = (day) => this.isBlocked(availableDays, day)\n    return (\n      <div className={styles.calendar}>\n        <label>Delivery Date</label>\n        <DayPickerSingleDateController\n          numberOfMonths={1} \n          focused={focused}\n          date={date}\n          daySize={daySize}\n          initialVisibleMonth={() => moment('12 2020', 'MM YYYY')}\n          isDayBlocked={isDayBlocked}\n          noNavButtons={true}\n          hideKeyboardShortcutsPanel={true}\n          onDateChange={this.onDateChange}\n          onFocusChange={this.onFocusChange}\n        />\n        \n      </div>\n    );\n    }\n  }\n  \n  DatesField.propTypes = {\n    onDeliveryDateChange: PropTypes.func.isRequired,\n    availableDays: PropTypes.array,\n    deliveryDate: PropTypes.shape(),\n  }\n  ","import { css } from 'emotion'\nimport { CTA } from '../../colorConsts'\n\nexport const postcode = css`\n  border: 1px solid ${CTA};\n  \n  line-height: 1.3em;\n  padding: .6em 1.4em .5em .8em;\n  width: 8em;\n  max-width: 80%;\n  box-sizing: border-box;\n  margin: 1em auto 0;\n  border-radius: 6px;\n\n`\n\nexport const label = css`\n  color: ${CTA};\n  box-sizing: border-box;\n  margin: 1em;\n  width: 6em;\n  font-size: 1.2em;\n  line-height: 2em;\n\n`\n\nexport const error = css`\n  font-size: 0.9em;\n  line-height: 1.6em;\n  margin: 1em 0;\n\n  @media (min-width: 768px) {\n    font-size: 0.9em;\n    margin: .5em 0;\n  }\n\n  a {\n    font-size: 0.9em;\n    line-height: 1.6em;\n    font-weight: 600;\n\n    @media (min-width: 768px) {\n      font-weight: 500;\n    }\n  }\n`\n\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nexport default class PostCodeInput extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      valid: true,\n      isMissingPostcode: false,\n      areaSurcharge: false,\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n    handleChange = (event) => {\n      const number = Number(event.target.value)\n      const { onPostCodeChange } = this.props\n      if (isNaN(number)) {\n        return\n      } \n\n      const valid = (number/1000 | 0) === 3\n\n      let isMissingPostcode = false\n      const { postcodes } = this.props\n      const postCodeEnum = postcodes.find(c => c.code === number) \n      if(valid) {\n        isMissingPostcode = !postCodeEnum\n      }\n      const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n      onPostCodeChange(number, valid)\n      this.setState({ \n        value: number,\n        valid,\n        isMissingPostcode,\n        areaSurcharge,\n      })\n    }\n  \n    render() {\n      const { valid, value, isMissingPostcode, areaSurcharge } = this.state\n  \n      return (\n        <>\n          <label className={styles.label}>Postcode</label>\n          <input \n            className={styles.postcode}\n            type=\"text\" pattern=\"[0-9]{4}\"\n            maxLength={4} minLength={4}\n            placeholder=\"3000\"\n            name=\"postcode\" value={value} \n            onChange={this.handleChange.bind(this)}\n          />\n          {areaSurcharge && (\n            <p className={styles.error}>\n              Delivery area surcharge of ${areaSurcharge} has been applied for selected postcode\n            </p>\n          )}\n          {!valid && (\n            <p className={styles.error}>\n              Please enter a valid Victorian postcode.\n            </p>\n          )}\n          {isMissingPostcode && (\n            <p className={styles.error}>\n              {`Oops! It looks like ${value} is out of our delivery range, please call us on `}\n                <a href=\"tel:0411399607\">0411399607</a>\n              {` for delivery quote to your area.`}\n          </p>\n          )}\n\n          </>\n      );\n    }\n  }\n  \n  PostCodeInput.propTypes = {\n    onPostCodeChange: PropTypes.func.isRequired,\n  }","export const STAND_KEY = 'cincostand'\n\n// prod_IJw75RnppIFZpM\tTree Installtion\n// prod_IJj83NN3LTVrfV\tTree Preservative\n// prod_IJj8xejfYwloc6\tWatering Kit\n// prod_IJj8Dz3eLUcKTJ\tTree Disposal\n// prod_IJj7tjbVfgty7J\tCinco Stand\n// prod_IJj4MpVfOHsjuG\tLarge Cinco Stand\n\nexport const ADDITIONAL_ITEMS = [{\n        name: 'prod_IJj7tjbVfgty7J',\n        key: 'cincostand',\n        label: 'Cinco Stand',\n        price: 45,\n        large: {\n          name: 'prod_IJj4MpVfOHsjuG',\n          key: 'largecincostand',\n          label: 'Large Cinco Stand',\n          price: 60,\n        },\n      },\n      {\n        name: 'prod_IJw75RnppIFZpM',\n        key: 'installation',\n        label: 'Installation',\n        price: 20,\n      },\n      {\n        name: 'prod_IJj8xejfYwloc6',\n        key: 'wateringkit',\n        label: 'Watering Kit',\n        price: 25,\n      },\n      {\n        name: 'prod_IJj8Dz3eLUcKTJ',\n        key: 'disposal',\n        label: 'Disposal',\n        price: 15,\n      },\n      {\n        name: 'prod_IJj83NN3LTVrfV',\n        key: 'preservative',\n        label: 'Preservative',\n        price: 5,\n      },\n]","import * as postcodes_json from './zones.json'\n\nexport const WEEKEND_SURCHARGE = 25\nexport const REMOTE_AREA_SURCHARGE = 25\nexport const CBD_SURCHARGE = 50\n\n/*\nCITY\tThursday\t3,5,6,10,12,13,17,19,20\nNORTH\tWednesday\t2,5,6,9,12,13,16,19,20\nWEST\tThursday\t3,5,6,10,12,13,17,19,20\nWEST/NORTH\tWednesday, Thursday\t2,3,5,6,8,9,12,13,16,17,19,20\nSOUTH/EAST\tMonday, Tuesday\t5,6,7,8,12,13,14,15,19,20\nSOUTH\tMonday, Tuesday, Friday\t4,5,6,7,8,11,12,13,14,15,18,19,20\n*/\nexport const ZONES = {\n    C2 : {\n        name: 'C2',\n        areaSurcharge: CBD_SURCHARGE,\n        availableDates: [3,5,6,10,12,13,17,19,20],\n    },\n    SE : {\n        name: 'E',\n        areaSurcharge: false,\n        availableDates: [5,6,7,8,12,13,14,15,19,20],\n    },\n    SE1 : {\n        name: 'E1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [5,6,7,8,12,13,14,15,19,20],\n    },\n    N : {\n        name: 'N',\n        areaSurcharge: false,\n        availableDates: [2,5,6,9,12,13,16,19,20],\n    },\n    N1 : {\n        name: 'N1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [2,5,6,9,12,13,16,19,20],\n    },\n    WN : {\n        name: 'N',\n        areaSurcharge: false,\n        availableDates: [2,3,5,6,8,9,12,13,16,17,19,20],\n    },\n    WN1 : {\n        name: 'WN1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [2,3,5,6,8,9,12,13,16,17,19,20],\n    },\n    S : {\n        name: 'S',\n        areaSurcharge: false,\n        availableDates: [4,5,6,7,8,11,12,13,14,15,18,19,20],\n    },\n    S1 : {\n        name: 'S1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [4,5,6,7,8,11,12,13,14,15,18,19,20],\n    },\n    W : {\n        name: 'W',\n        areaSurcharge: false,\n        availableDates: [3,5,6,10,12,13,17,19,20],\n    },\n    W1 : {\n        name: 'W1',\n        areaSurcharge: REMOTE_AREA_SURCHARGE,\n        availableDates: [3,5,6,10,12,13,17,19,20],\n    },\n}\n\n\n/**\n * reads postcodes from a Json file.\n * returns an array of postcodes, each element is in form\n * {\n    code: 3000,\n    zone: ZONES.C1\n}\n */\nexport const fetchPostCodesFromJson = () => {\n    if (!postcodes_json) {\n        return\n    }\n    const postcodes = postcodes_json.default.map((p) => {\n        return {\n            code: p.postcode,\n            zone: ZONES[`${p.zone}${!!p.surcharge ? p.surcharge : ''}`]\n        }\n    })\n    console.dir(postcodes)\n    return postcodes\n}","import { css } from 'emotion'\nimport { RED, PALE_GREEN, CTA, DARK_GREEN } from '../colorConsts'\n\nexport const tilesWpap = css`\n  padding: 8px 0;\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n\n  @media (min-width: 768px) {\n\n  }\n`\n\nexport const checkboxesWpap = css`\n  margin: 0 auto 1em;\n  text-align: left;\n  width: 11em;\n\n  @media (min-width: 420px) {\n    width: 9em;\n  }\n`\n\nexport const checkboxLabel = css`\n  color: ${RED};\n  overflow: visible;\n  white-space: nowrap;\n  font-size: 1.2em;\n  line-height: 1.8em;\n\n  span {\n    color: #666;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n`\n\n\nexport const h2 = css`\n  color: ${CTA};\n  text-transform: none;\n  line-height: 2em;\n  margin: 0;\n  font-weight: 500;\n\n`\n\nexport const boxWpap = css`\n  padding: 1em;\n  text-align: center;\n  border: 1px solid green;\n  background-color: ${PALE_GREEN};\n  margin: 1em auto 0;\n\n  @media (min-width: 768px) {\n    width: 500px;\n  }\n  \n`\n\nexport const cta = css`\n  width: 100%;\n  margin: 1em auto;\n  background-color: ${CTA};\n  font-size: 1em;\n\n  :active, :hover, :visited, :focus{\n    background-color: ${CTA};\n  }\n\n  :disabled{\n    background-color: #aaa;\n  }\n\n  @media (min-width: 768px) {\n    margin: 1em auto;\n    width: 12em;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 1.1em;\n\n  @media (min-width: 768px) {\n    font-size: 1em;\n  }\n`","import React from 'react'\nimport TreeTile from './treeTile'\nimport Checkbox from './checkbox'\nimport DatesField from './datesField'\nimport PostCodeInput from './postCodeInput'\nimport { TREES, LARGE_TREE_NAME } from './trees'\nimport { ADDITIONAL_ITEMS, STAND_KEY } from './additionalItems'\nimport {  \n  WEEKEND_SURCHARGE, \n  REMOTE_AREA_SURCHARGE, \n  CBD_SURCHARGE, \n  fetchPostCodesFromJson\n} from './zones'\nimport * as styles from './styles'\n\nclass TreesForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const defaultTree = TREES[0] || {}\n    const defaultAdditionalSelection = ADDITIONAL_ITEMS[0] || {}\n    const postcodes = fetchPostCodesFromJson()\n\n    this.state = {\n      trees: TREES,\n      selectedTree: defaultTree,\n      checkedItemsSet: new Set([defaultAdditionalSelection]),\n      disabledItemsSet: new Set(),\n      total: defaultTree.price + defaultAdditionalSelection.price,\n      postcodes,\n      areaSurcharge: false,\n      dateSurcharge: false,\n      postCode: null,\n      deliveryDate: null,\n      isFormValid: true,\n      formErrorMessage: \"Please enter a valid PostCode and select a delivery date\",\n    }\n\n    this.selectTree = this.selectTree.bind(this)\n    this.onAdditionalItemsChange = this.onAdditionalItemsChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onDeliveryDateChange = this.onDeliveryDateChange.bind(this)\n    this.onPostCodeChange = this.onPostCodeChange.bind(this)\n    this.isFormValid = this.isFormValid.bind(this)\n  }\n\n  selectTree(tree) {\n    this.setState(state => {\n      const trees = state.trees.map(item => {\n        return {...item, selected: item.name === tree.name}\n      })\n      return {\n        ...state, \n        trees: trees, \n        selectedTree : tree,\n        total: this.getTotal({tree:tree}) \n      }\n    })\n  }\n\n  getTotal({\n    tree = this.state.selectedTree,\n    checkedItems = [...this.state.checkedItemsSet],\n    dateSurcharge = this.state.dateSurcharge,\n    areaSurcharge = this.state.areaSurcharge,\n  }) {\n    const additinalItemsPrice = checkedItems.reduce((sum, item) => { \n        if (this.isAddedItemLargeStand(item)) {\n          return sum + item.large.price \n        }\n        return sum + item.price \n      }, 0\n    )\n    const areaPrice = areaSurcharge\n    const datePrice = dateSurcharge && WEEKEND_SURCHARGE\n\n    return tree.price + additinalItemsPrice + datePrice + areaPrice\n  }\n\n  onDeliveryDateChange(deliveryDate) { \n    const dateSurcharge = deliveryDate && (deliveryDate.day() % 6 === 0)\n    const { postCode } = this.state\n\n    this.setState((state) => ({ \n      ...state,\n      deliveryDate,\n      dateSurcharge, \n      isFormValid: this.isFormValid({ deliveryDate, postCode }),\n      total: this.getTotal({ dateSurcharge }),\n    }))\n  }\n\n  onPostCodeChange(postCode, valid) { \n    const { deliveryDate, postcodes, postCode: prevPostCode } = this.state\n\n    if (!valid && prevPostCode) { \n      this.setState((state) => ({ \n        ...state,\n        postCode: null,\n        isFormValid: false,\n        total: this.getTotal({ areaSurcharge: false }),\n      }))\n      return\n    }\n    const postCodeEnum = postcodes.find(c => c.code === postCode)\n    const availableDates = postCodeEnum ? postCodeEnum.zone.availableDates : []\n    const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n    let newDeliveryDate = deliveryDate\n    // if deliveryDate is selected, but not in avaiable dates, set to null\n    if (deliveryDate && !availableDates.find(d => d === deliveryDate.date())){\n      newDeliveryDate = null\n    }\n\n    if (!postCodeEnum) {\n      \n    }\n\n    this.setState((state) => ({ \n      ...state,\n      postCode,\n      areaSurcharge,\n      availableDates,\n      isFormValid: this.isFormValid({ deliveryDate: newDeliveryDate, postCode }),\n      deliveryDate: newDeliveryDate,\n      total: this.getTotal({ areaSurcharge }),\n    }))\n  }\n\n  onAdditionalItemsChange(e) {\n    const { checkedItemsSet, disabledItemsSet } = this.state\n    const { name : itemKey, checked: isChecked } = e.target\n\n    const item = ADDITIONAL_ITEMS.find(i => i.key === itemKey)\n\n    if (!isChecked) {\n      checkedItemsSet.delete(item)\n    } else {\n      checkedItemsSet.add(item)\n    }\n    this.updateInstallation(isChecked, itemKey, checkedItemsSet, disabledItemsSet)\n\n    this.setState((state) => ({ \n      ...state,\n      checkedItemsSet,\n      total: this.getTotal({checkedItems:  [...checkedItemsSet]}),\n    }));\n  }\n\n  updateInstallation(isChecked, itemKey, checkedItemsSet, disabledItemsSet) {\n    if (!itemKey.includes(STAND_KEY)) { \n      return\n    }\n    const installation = ADDITIONAL_ITEMS.find(i => i.key === 'installation')\n    if (isChecked) {\n      disabledItemsSet.delete(installation)\n    } else {\n      checkedItemsSet.delete(installation)\n      disabledItemsSet.add(installation)\n    }\n  }\n\n  getLabelText(item) {\n    return <>{item.label} <span>{`+$${item.price}`}</span></>\n  }\n\n  isFormValid ({ \n    deliveryDate, \n    postCode,\n  }) {\n    return !!postCode && !!deliveryDate\n  }\n\n  isAddedItemLargeStand(item) {\n    const { selectedTree } = this.state\n    return item.key === STAND_KEY && selectedTree.name === LARGE_TREE_NAME\n  }\n\n  /*returns a string day of month with formatted like this:\n  / '01'  - zero prepending if number is one digit\n  / '10'\n  */\n  formatDate(date) {\n    return date ? ('0' + date.date()).slice(-2) : ''\n  }\n\n  formatAdditionalItemsNames(checkedItemsSet) {\n    const additionalItemsNames = [...checkedItemsSet].map(i => {\n      if (this.isAddedItemLargeStand(i)){\n        return i.large.name\n      }\n      return i.name\n    })\n    return additionalItemsNames || []\n  }\n\n  /* \"Remote\" | \"CBD\" | \"\" */\n  formatArea(areaSurcharge) {\n    if(areaSurcharge === REMOTE_AREA_SURCHARGE) {\n      return 'Remote'\n    }\n    if(areaSurcharge === CBD_SURCHARGE) {\n      return 'CBD'\n    }\n    return ''\n  }\n\n  onSubmit(e) {\n    if(!this.isFormValid(this.state)){\n      e.preventDefault()\n      this.setState((state) => ({ \n        ...state,\n        isFormValid: false,\n      }))\n      return \n    }\n\n    console.log(e.target.tree.value)\n    console.log(e.target.addOns.value)\n    console.log(e.target.postcode.value)\n    console.log(e.target.deliveryDay.value)\n    console.log(e.target.area.value)\n    console.log(e.target.total.value)\n  }\n\n  render() {\n    const { \n      trees, \n      total, \n      checkedItemsSet, \n      disabledItemsSet, \n      availableDates,\n      deliveryDate,\n      isFormValid,\n      formErrorMessage,\n      postcodes,\n      selectedTree,\n      areaSurcharge,\n    } = this.state\n\n    const treesList = trees.map(tree => (\n      <TreeTile tree={tree} key={tree.name} selectTree={this.selectTree}/>\n    ))\n\n    const checkboxes = ADDITIONAL_ITEMS.map(item => {\n      let labelText = this.getLabelText( \n        this.isAddedItemLargeStand(item) ? item.large : item\n      )\n\n      return (\n        <div key={item.key}>\n          <label className={styles.checkboxLabel}>\n            <Checkbox \n              name={item.key} \n              checked={checkedItemsSet.has(item)} \n              disabled={disabledItemsSet.has(item)} \n              onChange={this.onAdditionalItemsChange} \n            />\n            {labelText}\n          </label>\n        </div>\n    )})\n\n    return (\n      <form \n        className={styles.boxWpap} \n        name=\"trees\"  \n        method=\"post\"  \n        action=\"/checkout\" \n        onSubmit={this.onSubmit}\n      >\n        <input name=\"tree\" value={selectedTree.key} type=\"hidden\"/>\n        <input name=\"addOns\" value={this.formatAdditionalItemsNames(checkedItemsSet)} type=\"hidden\"/>\n        <input name=\"deliveryDay\" value={this.formatDate(deliveryDate)} type=\"hidden\"/>\n        <input name=\"area\" value={this.formatArea(areaSurcharge)} type=\"hidden\"/>\n        <input name=\"total\" value={total || 0} type=\"hidden\"/>\n\n        <h2 className={styles.h2}>Order now</h2>\n        <hr className={styles.hr}/>\n        <div className={styles.tilesWpap}>\n          {treesList}\n        </div>\n        <div className={styles.checkboxesWpap}>\n          {checkboxes}\n        </div>\n        <hr className={styles.hr}/>\n        <div className={styles.subTextGreen}>\n          Delivery starts in December. Please note! Additional surcharge may be applied for CBD, remote suburbs and weekend deliveries.\n        </div>\n        <PostCodeInput \n          postcodes={postcodes}\n          onPostCodeChange={this.onPostCodeChange}/>\n        <DatesField \n          onDeliveryDateChange={this.onDeliveryDateChange}\n          availableDays={availableDates}\n          deliveryDate={deliveryDate}\n        />\n        <hr className={styles.hr}/>\n        <button \n          type=\"submit\"\n          className={styles.cta} \n          disabled={!isFormValid}\n        >\n            {`Buy for $${total}`}\n        </button>\n        <p>{!isFormValid && formErrorMessage}</p>\n      </form>\n    )\n  }\n}\n\n\n\nexport default TreesForm\n\nTreesForm.propTypes = {\n\n}\n","import { css } from 'emotion'\nimport { RED, DARK_GREEN, YELLOW } from './colorConsts'\n\nexport const pageWpap = css`\n  &&& {\n    @media (min-width: 768px) {\n      font-size: 20px;\n      line-height: 26px;\n    }\n  }\n  padding: 20px;\n  text-align: center;\n  width: 100%;\n  background-image: url(\"./images/mobile_bg.png\"); \n  background-repeat: no-repeat;\n  background-size: 100%;\n\n  @media (min-width: 600px) {\n   background-image: url(\"./images/bg.png\"); \n  }\n`\n\nexport const specialOffer = css`\n  color: ${YELLOW};\n  background-color: ${RED};\n  width: 90%;\n  margin: 2vw auto 0;\n  padding: 0.4em 0.4em 0.4em 4em;\n  font-size: 0.8em;\n  line-height: 1.2em;\n  border: 1px solid #fff;\n  position: relative;\n\n  span {\n    font-size: 0.8em;\n    line-height: 1.2em;\n    color: ${YELLOW};\n  }\n\n  ::after {\n    content: \"\";\n    background-image: url(\"./images/bells.png\"); \n    background-repeat: no-repeat;\n    position: absolute;\n    background-size: 110px;\n    top:-20px;\n    left: -40px;\n    height: 130px;\n    width: 110px;\n\n    @media (min-width: 768px) {\n      background-image: url(\"./images/bells_desktop.png\"); \n      background-size: 15vw; \n      top:-2.4vw;\n      left: -10vw;\n      height: 18vw; \n      width: 15vw; \n    }\n  }\n\n  @media (min-width: 500px) {\n    width: 28em;\n    padding: 0.5em 0.5em 0.5em 3em;\n    cursor: pointer;\n  }\n\n  @media (min-width: 768px) {\n    width: 24em;\n    font-size: 1.6vw;\n    line-height: 2vw;\n    padding: 0.5em 0.5em 0.5em 2.2em;\n\n    span {\n      font-size: 0.75em;\n    }\n  }\n`\n\nexport const subTextRed = css`\n  color: ${RED};\n  width: 100%;\n  margin: 11em auto 1em;\n  font-size: 0.9em;\n\n  @media (min-width: 360px) {\n    margin: 0 auto 8em;\n  }\n\n  @media (min-width: 400px) {\n    margin: 0 auto 9em;\n  }\n\n  @media (min-width: 480px) {\n    font-size: 1.1em;\n    width: 28em;\n    cursor: pointer;\n  }\n\n  @media (min-width: 768px) {\n    width: 50vw;\n    font-size: 1.7vw;\n    line-height: 2.2vw;\n    margin: 0 auto 25vw;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 0.9em;\n\n  @media (min-width: 500px) {\n    width: 32em;\n  }\n`\n\nexport const h1 = css`\n  margin: 3vw auto 1vw;\n  // background-image: url(\"./images/jingles-logo_mobile.png\"); \n  // height: 20vw;\n  // max-height: 44px;\n  // max-width: 94px;\n\n  background-image: url(\"./images/jingles-logo.png\"); \n  background-repeat: no-repeat;\n  height: 95px;\n  width: 244px;\n\n  cursor: pointer;\n\n  @media (min-width: 768px) {\n    height: 12vw;\n    max-height: 95px;\n    max-width: 244px;\n  }\n`\n\nexport const car = css`\n  background-image: url(\"./images/truck_new.png\"); \n  background-repeat: no-repeat;\n  height: 179px;\n  width: 300px;\n  margin: 0 auto;\n`\n","import React from 'react'\nimport TreesForm from './treesForm'\nimport * as styles from './styles'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: undefined\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ done: true })\n    }, 200);\n  }\n\n  scrollToForm() {\n    const anchor = document.getElementsByName('trees')[0]\n    if(anchor){\n      anchor.scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.done ? (\n           <div className={styles.pageWpap}>\n             <div className={styles.specialOffer} onClick={this.scrollToForm}>\n               Standard Tree with Cinco stand for $154\n               <br/>\n               <span>including delivery in Melbourne Area during the week.</span>\n             </div>\n             <div className={styles.h1} onClick={this.scrollToForm}>\n             </div>\n             <div className={styles.subTextRed} onClick={this.scrollToForm}>\n               Are you looking for a real Christmas tree to make your Christmas spectacular? You just found it! Save with our special offer.\n             </div>\n             <div className={styles.subTextGreen}>\n               Our trees are sustainably grown on a farm in Daylesford (VIC).\n               With delivery, setup and disposal, you get it all covered.\n             </div>\n             <TreesForm></TreesForm>\n             <div className={styles.car}></div>\n           </div>\n        ) : (\n          <h1 className=\"loading\">Jingles Xmas Trees</h1>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'react-dates/initialize'\nimport 'react-dates/lib/css/_datepicker.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}