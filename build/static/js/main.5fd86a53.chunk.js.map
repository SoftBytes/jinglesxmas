{"version":3,"sources":["treesForm/trees.js","colorConsts.js","treesForm/treeTile/styles.js","treesForm/treeTile/index.js","treesForm/checkbox/styles.js","treesForm/checkbox/index.js","treesForm/datesField/styles.js","treesForm/datesField/index.js","treesForm/postCodeInput/styles.js","treesForm/postCodeInput/index.js","treesForm/additionalItems.js","treesForm/zones.js","treesForm/styles.js","treesForm/index.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["TREES","name","height","price","selected","RED","CTA","treeTile","css","_templateObject","activeClass","_templateObject2","bigTree","_templateObject3","title","_templateObject4","hr","_templateObject5","TreeTile","_ref","_classNames","_ref$tree","tree","selectTree","_tree$height","_tree$price","tilesClasses","classNames","Object","defineProperty","styles","react_default","a","createElement","Fragment","className","onClick","concat","input","styles_templateObject","Checkbox","_ref$type","type","_ref$checked","checked","_ref$disabled","disabled","onChange","datesField_styles_templateObject","calendar","styles_templateObject2","DatesField","props","_this","classCallCheck","this","_super","call","isBlocked","availableDays","day","find","d","date","deliveryDate","state","focused","daySize","onDateChange","bind","assertThisInitialized","onFocusChange","window","addEventListener","resize","newSize","innerWidth","setState","removeEventListener","prevProps","onDeliveryDateChange","_this2","_this$state","_this$props$available","react_dates","numberOfMonths","initialVisibleMonth","moment","isDayBlocked","noNavButtons","hideKeyboardShortcutsPanel","React","Component","postcode","postCodeInput_styles_templateObject","label","postCodeInput_styles_templateObject2","PostCodeInput","handleChange","event","number","Number","target","value","onPostCodeChange","isNaN","valid","pattern","maxLength","minLength","placeholder","ADDITIONAL_ITEMS","key","large","ZONES","C1","areaSurcharge","availableDates","E","E1","N","N1","S","S1","W","W1","fetchPostCodesFromJson","postcodes_json","map","p","code","zone","Zone","surcharge","tilesWpap","treesForm_styles_templateObject","checkboxesWpap","treesForm_styles_templateObject2","checkboxLabel","styles_templateObject3","styles_templateObject4","h2","styles_templateObject5","boxWpap","_templateObject6","cta","_templateObject7","subTextGreen","_templateObject8","TreesForm","defaultTree","defaultAdditionalSelection","postcodes","trees","selectedTree","checkedItemsSet","Set","disabledItemsSet","total","dateSurcharge","postCode","isFormValid","formErrorMessage","onAdditionalItemsChange","onSubmit","item","objectSpread2","getTotal","_this3","_ref$checkedItems","checkedItems","toConsumableArray","_ref$dateSurcharge","_ref$areaSurcharge","additinalItemsPrice","reduce","sum","isAddedItemLargeStand","areaPrice","datePrice","_this4","_this5","prevPostCode","postCodeEnum","c","newDeliveryDate","e","_this6","_this$state2","_e$target","itemName","isChecked","i","add","delete","updateInstallation","includes","installation","_ref2$deliveryDate","_ref2","_ref2$postCode","_this7","preventDefault","_this$state3","additionalItems","requestBody","weekendSurcharge","console","dir","JSON","stringify","fetch","method","body","then","response","log","json","_this8","_this$state4","treesList","treesForm_treeTile","checkboxes","labelText","getLabelText","treesForm_checkbox","has","postCodeInput_PostCodeInput","datesField_DatesField","pageWpap","src_styles_templateObject","specialOffer","src_styles_templateObject2","subTextRed","src_styles_templateObject3","src_styles_templateObject4","h1","src_styles_templateObject5","car","styles_templateObject6","PrimaryLayout","treesForm","App","done","undefined","setTimeout","App_PrimaryLayout","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fd86a53.chunk.js","sourcesContent":["export const STANDARD_TREE_NAME = 'Standard'\nexport const LARGE_TREE_NAME = 'Large'\n\nexport const TREES = [{\n        name: STANDARD_TREE_NAME,\n        height: '1.8m',\n        price: 109,\n        selected: true,\n    },{\n        name: LARGE_TREE_NAME,\n        height: '2.1m',\n        price: 139,\n    }]","export const RED = '#ff1212'\nexport const PALE_GREEN = '#f4f5eb'\nexport const CTA = '#6e9366'\nexport const DARK_GREEN = '#2b4432'\nexport const YELLOW = '#ffffa5'\n\n","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const treeTile = css`\n  width: 46%;\n  background-color: #fdecd3;\n  padding: .5em 0 .5em 2.6em;\n  box-sizing: border-box;\n  border-radius: 6px;\n  box-shadow: 2px 2px 2px #ddd;\n  text-align: center;\n  font-size: 0.6em;\n  margin: 0.5em;\n\n  background-image: url(\"./images/tree_card.png\"); \n  background-repeat: no-repeat;\n  background-size: 3.1em;\n  background-position: left 1em bottom .8em;\n\n  @media (min-width: 375px) {\n    font-size: 0.8em;\n  }\n\n  @media (min-width: 768px) {\n    width: 300px;\n    margin: 1em;\n  }\n`\n\nexport const activeClass = css`\n  border: 1px solid ${RED};\n  label {\n    font-weight: 600;\n  }\n`\n\nexport const bigTree = css`\n  background-size: 3.6em;\n`\n\nexport const title = css`\n  color: ${RED};\n  font-weight: 500;\n\n  font-size: 16px;\n\n  @media (min-width: 375px) {\n    font-size: 18px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.5em;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n  margin: 0 20px;\n\n  @media (min-width: 375px) {\n    margin: 0 40px;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 4em;\n  }\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport * as trees from '../trees'\nimport * as styles from './styles'\n\nexport const TreeTile = ({ tree = {}, selectTree }) => {\n\n  const {\n    name,\n    height = '',\n    price = '',\n    selected,\n  } = tree\n\n  let tilesClasses = classNames({\n    [styles.treeTile] : true,\n    [styles.activeClass] : !!selected,\n    [styles.bigTree]: name === trees.LARGE_TREE_NAME,\n  })\n\n  return (\n    <>\n      <div className={tilesClasses} \n          onClick={() => {selectTree(tree)}}\n      >\n        <label className={styles.title}>{name}</label>\n        <div>{height}</div>\n        <hr className={styles.hr}/>\n        <div>{`$${price}`}</div>\n      </div>\n    </>\n  )\n}\n\nexport default TreeTile\n\nTreeTile.propTypes = {\n  tree: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  selectTree: PropTypes.func,\n}\n","import { css } from 'emotion'\n\nexport const input = css`\n  margin-right: 0.4em;\n`\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nconst Checkbox = ({ \n  type = 'checkbox', \n  name, \n  checked = false, \n  disabled = false,\n  onChange \n}) => { \n  return (\n    <input \n      className={styles.input}\n      type={type} \n      name={name} \n      checked={checked} \n      disabled={disabled}\n      onChange={onChange} \n    />\n  )\n}\n\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const datesSelect = css`\n  border: 1px solid ${CTA};\n  color: ${RED} !important;\n  line-height: 1.3;\n  padding: .6em 1.4em .5em .8em;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border: 1px solid #aaa;\n  box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 80%;\n    max-width: 80%;\n  }\n\n`\n\nexport const calendar = css`\n  \n    td.CalendarDay__selected, \n    td.CalendarDay__selected:active, \n    td.CalendarDay__selected:hover {\n        border: 1px double ${CTA} !important;\n        background: ${CTA} !important;\n    }\n\n    .DayPicker {\n        margin: .6em auto 1em;\n    }\n\n    label {\n        color: ${CTA};\n        margin: .6em auto;\n        font-size: 1.2em;\n    }\n\n    margin: 1em auto 0;\n    text-align: center;\n\n`\n\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { DayPickerSingleDateController } from 'react-dates'\nimport moment from 'moment'\nimport * as styles from './styles'\n\nexport default class DatesField extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const { deliveryDate } = this.props\n\n    this.state = {\n      date: deliveryDate,\n      focused: true,\n      daySize: 35,\n    }\n\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n    this.resize();\n  }\n\n  resize() {\n    const { daySize } = this.state\n    let newSize = daySize\n    if ( window.innerWidth <= 325 ) {\n      newSize = 29\n    } else if ( window.innerWidth < 400 ) {\n      newSize = 35\n    } else {\n      newSize = 39\n    }\n    \n    if (daySize === newSize) {\n      return\n    }\n    this.setState({ daySize: newSize })\n  }\n\n  componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.deliveryDate !== prevProps.deliveryDate) {\n      this.setState({ \n        date: this.props.deliveryDate\n      })\n    }\n  }\n\n  onDateChange(date) {\n    const { onDeliveryDateChange } = this.props\n    onDeliveryDateChange(date)\n    this.setState({ date })\n  }\n\n  onFocusChange() {\n    // Force the focused states to always be truthy so that date is always selectable\n    this.setState({ focused: true })\n  }\n\n  isBlocked = (availableDays, day) => {\n    return !availableDays.find(d => d === day.date())\n  }\n\n  render() {\n    const { focused, daySize, date } = this.state\n    const { availableDays = [] } = this.props\n    const isDayBlocked = (day) => this.isBlocked(availableDays, day)\n    return (\n      <div className={styles.calendar}>\n        <label>Delivery Date</label>\n        <DayPickerSingleDateController\n          numberOfMonths={1} \n          focused={focused}\n          date={date}\n          daySize={daySize}\n          initialVisibleMonth={() => moment('12 2020', 'MM YYYY')}\n          isDayBlocked={isDayBlocked}\n          noNavButtons={true}\n          hideKeyboardShortcutsPanel={true}\n          onDateChange={this.onDateChange}\n          onFocusChange={this.onFocusChange}\n        />\n        \n      </div>\n    );\n    }\n  }\n  \n  DatesField.propTypes = {\n    onDeliveryDateChange: PropTypes.func.isRequired,\n    availableDays: PropTypes.array,\n    deliveryDate: PropTypes.shape(),\n  }\n  ","import { css } from 'emotion'\nimport { CTA } from '../../colorConsts'\n\nexport const postcode = css`\n  border: 1px solid ${CTA};\n  \n  line-height: 1.3em;\n  padding: .6em 1.4em .5em .8em;\n  width: 8em;\n  max-width: 80%;\n  box-sizing: border-box;\n  margin: 1em auto 0;\n  border-radius: 6px;\n\n`\n\nexport const label = css`\n  color: ${CTA};\n  box-sizing: border-box;\n  margin: 1em;\n  width: 6em;\n  font-size: 1.2em;\n  line-height: 2em;\n\n`\n\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nexport default class PostCodeInput extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n      valid: true,\n    }\n  }\n\n    handleChange = (event) => {\n      const number = Number(event.target.value)\n      const { onPostCodeChange } = this.props\n      if (isNaN(number)) {\n        return\n      } \n\n      const valid = (number/1000 | 0) === 3\n      onPostCodeChange(number, valid)\n      this.setState({ \n        value: number,\n        valid,\n      })\n    }\n  \n    render() {\n      const { valid, value } = this.state\n  \n      return (\n        <>\n          <label className={styles.label}>Postcode</label>\n          <input \n            className={styles.postcode}\n            type=\"text\" pattern=\"[0-9]{4}\"\n            maxLength={4} minLength={4}\n            placeholder=\"3000\"\n            name=\"title\" value={value} \n            onChange={this.handleChange.bind(this)}\n            />\n          {!valid && <p>Please enter a valid Victorian postcode.</p>}\n        </>\n      );\n    }\n  }\n  \n  PostCodeInput.propTypes = {\n    onPostCodeChange: PropTypes.func.isRequired,\n  }","export const STAND_KEY = 'cincostand'\n\nexport const ADDITIONAL_ITEMS = [{\n        name: 'cincostand',\n        key: 'cincostand',\n        label: 'Cinco Stand',\n        price: 45,\n        large: {\n          label: 'Large Cinco Stand',\n          price: 60,\n        },\n      },\n      {\n        name: 'installation',\n        key: 'installation',\n        label: 'Installation',\n        price: 20,\n      },\n      {\n        name: 'wateringkit',\n        key: 'wateringkit',\n        label: 'Watering Kit',\n        price: 25,\n      },\n      {\n        name: 'disposal',\n        key: 'disposal',\n        label: 'Disposal',\n        price: 15,\n      },\n]","import * as postcodes_json from './zones.json'\n\nexport const WEEKEND_SURCHARGE = 25\nexport const AREA_SURCHARGE = 25\n\nexport const ZONES = {\n    C1 : {\n        name: 'C1',\n        areaSurcharge: true,\n        availableDates: [1,2,5,6,8,9,12,13,15,16,19,20],\n    },\n    E : {\n        name: 'E',\n        areaSurcharge: false,\n        availableDates: [1,2,5,6,8,9],\n    },\n    E1 : {\n        name: 'E1',\n        areaSurcharge: true,\n        availableDates: [1,2,5,6,8,9],\n    },\n    N : {\n        name: 'N',\n        areaSurcharge: false,\n        availableDates: [1, 2, 3],\n    },\n    N1 : {\n        name: 'N1',\n        areaSurcharge: true,\n        availableDates: [1, 2, 3],\n    },\n    S : {\n        name: 'S',\n        areaSurcharge: false,\n        availableDates: [8,9,12,13],\n    },\n    S1 : {\n        name: 'S1',\n        areaSurcharge: true,\n        availableDates: [8,9,12,13],\n    },\n    W : {\n        name: 'W',\n        areaSurcharge: false,\n        availableDates: [15,16,19,20],\n    },\n    W1 : {\n        name: 'W1',\n        areaSurcharge: true,\n        availableDates: [15,16,19,20],\n    },\n}\n\n\n/**\n * reads postcodes from a Json file.\n * returns an array of postcodes, each element is in form\n * {\n    code: 3000,\n    zone: ZONES.C1\n}\n */\nexport const fetchPostCodesFromJson = () => {\n    if (!postcodes_json) {\n        return\n    }\n    const postcodes = postcodes_json.default.map((p) => {\n        return {\n            code: p.postcode,\n            zone: ZONES[`${p.Zone}${!!p.surcharge ? p.surcharge : ''}`]\n        }\n    })\n    // console.dir(postcodes)\n    return postcodes\n}","import { css } from 'emotion'\nimport { RED, PALE_GREEN, CTA, DARK_GREEN } from '../colorConsts'\n\nexport const tilesWpap = css`\n  padding: 8px 0;\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n\n  @media (min-width: 768px) {\n\n  }\n`\n\nexport const checkboxesWpap = css`\n  margin: 0 auto 1em;\n  text-align: left;\n  width: 11em;\n\n  @media (min-width: 420px) {\n    width: 9em;\n  }\n`\n\nexport const checkboxLabel = css`\n  color: ${RED};\n  overflow: visible;\n  white-space: nowrap;\n  font-size: 1.2em;\n  line-height: 1.8em;\n\n  span {\n    color: #666;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n`\n\n\nexport const h2 = css`\n  color: ${CTA};\n  text-transform: none;\n  line-height: 2em;\n  margin: 0;\n  font-weight: 500;\n\n`\n\nexport const boxWpap = css`\n  padding: 1em;\n  text-align: center;\n  border: 1px solid green;\n  background-color: ${PALE_GREEN};\n  margin: 1em auto 0;\n\n  @media (min-width: 768px) {\n    width: 500px;\n  }\n  \n`\n\nexport const cta = css`\n  width: 100%;\n  margin: 0.4em auto 0;\n  background-color: ${CTA};\n  font-size: 1em;\n\n  :active, :hover, :visited, :focus{\n    background-color: ${CTA};\n  }\n\n  :disabled{\n    background-color: #aaa;\n  }\n\n  @media (min-width: 768px) {\n    margin: 1em auto;\n    width: 12em;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n`","import React from 'react'\nimport TreeTile from './treeTile'\nimport Checkbox from './checkbox'\nimport DatesField from './datesField'\nimport PostCodeInput from './postCodeInput'\nimport { TREES, LARGE_TREE_NAME } from './trees'\nimport { ADDITIONAL_ITEMS, STAND_KEY } from './additionalItems'\nimport {  \n  WEEKEND_SURCHARGE, \n  AREA_SURCHARGE, \n  fetchPostCodesFromJson\n} from './zones'\nimport * as styles from './styles'\n\nclass TreesForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const defaultTree = TREES[0] || {}\n    const defaultAdditionalSelection = ADDITIONAL_ITEMS[0] || {}\n    const postcodes = fetchPostCodesFromJson()\n\n    this.state = {\n      trees: TREES,\n      selectedTree: defaultTree,\n      checkedItemsSet: new Set([defaultAdditionalSelection]),\n      disabledItemsSet: new Set(),\n      total: defaultTree.price + defaultAdditionalSelection.price,\n      postcodes,\n      areaSurcharge: false,\n      dateSurcharge: false,\n      postCode: null,\n      deliveryDate: null,\n      isFormValid: true,\n      formErrorMessage: \"Please enter a valid PostCode and select a delivery date\",\n    }\n\n    this.selectTree = this.selectTree.bind(this)\n    this.onAdditionalItemsChange = this.onAdditionalItemsChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onDeliveryDateChange = this.onDeliveryDateChange.bind(this)\n    this.onPostCodeChange = this.onPostCodeChange.bind(this)\n  }\n\n  selectTree(tree) {\n    this.setState(state => {\n      const trees = state.trees.map(item => {\n        return {...item, selected: item.name === tree.name}\n      })\n      return {\n        ...state, \n        trees: trees, \n        selectedTree : tree,\n        total: this.getTotal({tree:tree}) \n      }\n    })\n  }\n\n  getTotal({\n    tree = this.state.selectedTree,\n    checkedItems = [...this.state.checkedItemsSet],\n    dateSurcharge = this.state.dateSurcharge,\n    areaSurcharge = this.state.areaSurcharge,\n  }) {\n    const additinalItemsPrice = checkedItems.reduce((sum, item) => { \n        if (this.isAddedItemLargeStand(item)) {\n          return sum + item.large.price \n        }\n        return sum + item.price \n      }, 0\n    )\n    const areaPrice = areaSurcharge && AREA_SURCHARGE\n    const datePrice = dateSurcharge && WEEKEND_SURCHARGE\n\n    return tree.price + additinalItemsPrice + datePrice + areaPrice\n  }\n\n  onDeliveryDateChange(deliveryDate) { \n    const dateSurcharge = deliveryDate && (deliveryDate.day() % 6 === 0)\n    this.setState((state) => ({ \n      ...state,\n      deliveryDate,\n      dateSurcharge, \n      isFormValid: this.isFormValid({ deliveryDate }),\n      total: this.getTotal({ dateSurcharge }),\n    }))\n  }\n\n  onPostCodeChange(postCode, valid) { \n    const { deliveryDate, postcodes, postCode: prevPostCode } = this.state\n\n    if (!valid && prevPostCode) { \n      this.setState((state) => ({ \n        ...state,\n        postCode: null,\n        isFormValid: false,\n        total: this.getTotal({ areaSurcharge: false }),\n      }))\n      return\n    }\n    const postCodeEnum = postcodes.find(c => c.code === postCode)\n    const availableDates = postCodeEnum ? postCodeEnum.zone.availableDates : []\n    const areaSurcharge = postCodeEnum ? postCodeEnum.zone.areaSurcharge : false\n\n    let newDeliveryDate = deliveryDate\n    // if deliveryDate is selected, but not in avaiable dates, set to null\n    if (deliveryDate && !availableDates.find(d => d === deliveryDate.date())){\n      newDeliveryDate = null\n    }\n\n    this.setState((state) => ({ \n      ...state,\n      postCode,\n      areaSurcharge,\n      availableDates,\n      isFormValid: this.isFormValid({ deliveryDate: newDeliveryDate, postCode }),\n      deliveryDate: newDeliveryDate,\n      total: this.getTotal({ areaSurcharge }),\n    }))\n  }\n\n  onAdditionalItemsChange(e) {\n    const { checkedItemsSet, disabledItemsSet } = this.state\n    const { name : itemName , checked : isChecked} = e.target\n\n    const item = ADDITIONAL_ITEMS.find(i => i.name === itemName)\n\n    if (!isChecked) {\n      checkedItemsSet.delete(item)\n    } else {\n      checkedItemsSet.add(item)\n    }\n    this.updateInstallation(isChecked, itemName, checkedItemsSet, disabledItemsSet)\n\n    this.setState((state) => ({ \n      ...state,\n      checkedItemsSet,\n      total: this.getTotal({checkedItems:  [...checkedItemsSet]}),\n    }));\n  }\n\n  updateInstallation(isChecked, itemName, checkedItemsSet, disabledItemsSet) {\n    if (!itemName.includes(STAND_KEY)) { \n      return\n    }\n    const installation = ADDITIONAL_ITEMS.find(i => i.name === 'installation')\n    if (isChecked) {\n      disabledItemsSet.delete(installation)\n    } else {\n      checkedItemsSet.delete(installation)\n      disabledItemsSet.add(installation)\n    }\n  }\n\n  getLabelText(item) {\n    return <>{item.label} <span>{`+$${item.price}`}</span></>\n  }\n\n  isFormValid ({ \n    deliveryDate = this.state.deliveryDate, \n    postCode = this.state.postCode,\n  }) {\n    return !!postCode && !!deliveryDate\n  }\n\n  isAddedItemLargeStand(item) {\n    const { selectedTree } = this.state\n    return item.key === STAND_KEY && selectedTree.name === LARGE_TREE_NAME\n  }\n\n  onSubmit(e) {\n    e.preventDefault()\n\n    const { \n      checkedItemsSet, \n      selectedTree,\n      deliveryDate,\n      postCode,\n      areaSurcharge,\n      dateSurcharge,\n    } = this.state\n\n    if (!this.isFormValid({ deliveryDate, postCode })) {\n      this.setState((state) => ({ \n        ...state,\n        isFormValid: false,\n      }))\n      return\n    }\n\n    const additionalItems = [...checkedItemsSet].map(i => {\n      if (this.isAddedItemLargeStand(i)){\n        return i.large.name\n      }\n      return i.name\n    })\n\n    const requestBody = {\n      tree: selectedTree.name,\n      deliveryDate: deliveryDate.date(),\n      postCode: postCode,\n      additionalItems: additionalItems,\n      areaSurcharge: areaSurcharge || AREA_SURCHARGE,\n      weekendSurcharge: dateSurcharge | WEEKEND_SURCHARGE\n    }\n\n    console.dir(JSON.stringify(requestBody))\n\n    fetch('/checkout', {\n        method: 'POST',\n        body: JSON.stringify(requestBody)\n      }).then(function(response) {\n        console.log(response)\n        return response.json();\n      });\n  }\n\n  render() {\n    const { \n      trees, \n      total, \n      checkedItemsSet, \n      disabledItemsSet, \n      availableDates,\n      deliveryDate,\n      isFormValid,\n      formErrorMessage,\n    } = this.state\n\n    const treesList = trees.map(tree => (\n      <TreeTile tree={tree} key={tree.name} selectTree={this.selectTree}/>\n    ))\n\n    const checkboxes = ADDITIONAL_ITEMS.map(item => {\n      let labelText = this.getLabelText( \n        this.isAddedItemLargeStand(item) ? item.large : item\n      )\n\n      return (\n        <div key={item.key}>\n          <label className={styles.checkboxLabel}>\n            <Checkbox \n              name={item.name} \n              checked={checkedItemsSet.has(item)} \n              disabled={disabledItemsSet.has(item)} \n              onChange={this.onAdditionalItemsChange} \n            />\n            {labelText}\n          </label>\n        </div>\n    )})\n    \n\n    return (\n      <form \n        className={styles.boxWpap} \n        method=\"post\"     \n        onSubmit={this.onSubmit}\n      >\n        <h2 className={styles.h2}>Order now</h2>\n        <hr className={styles.hr}/>\n        <div className={styles.tilesWpap}>\n          {treesList}\n        </div>\n        <div className={styles.checkboxesWpap}>\n          {checkboxes}\n        </div>\n        <hr className={styles.hr}/>\n        <div className={styles.subTextGreen}>\n          Delivery starts in December. Additional weekend and area surcharge applies.\n        </div>\n        <PostCodeInput onPostCodeChange={this.onPostCodeChange}/>\n        <DatesField \n          onDeliveryDateChange={this.onDeliveryDateChange}\n          availableDays={availableDates}\n          deliveryDate={deliveryDate}\n        />\n        <hr className={styles.hr}/>\n        <button className={styles.cta} disabled={!isFormValid}>\n            {`Buy for $${total}`}\n        </button>\n        <p>{!isFormValid && formErrorMessage}</p>\n      </form>\n    )\n  }\n}\n\n\n\nexport default TreesForm\n\nTreesForm.propTypes = {\n\n}\n","import { css } from 'emotion'\nimport { RED, DARK_GREEN, YELLOW } from './colorConsts'\n\nexport const pageWpap = css`\n  &&& {\n    @media (min-width: 768px) {\n      font-size: 20px;\n      line-height: 26px;\n    }\n  }\n  padding: 20px;\n  text-align: center;\n  width: 100%;\n  background-image: url(\"./images/mobile_bg.png\"); \n  background-repeat: no-repeat;\n  background-size: 100%;\n\n  @media (min-width: 600px) {\n   background-image: url(\"./images/bg.png\"); \n  }\n`\n\nexport const specialOffer = css`\n  color: ${YELLOW};\n  background-color: ${RED};\n  width: 90%;\n  margin: 2vw auto 0;\n  padding: 0.4em 0.4em 0.4em 4em;\n  font-size: 0.8em;\n  line-height: 1.2em;\n  border: 1px solid #fff;\n  position: relative;\n\n  span {\n    font-size: 0.8em;\n    line-height: 1.2em;\n    color: ${YELLOW};\n  }\n\n  ::after {\n    content: \"\";\n    background-image: url(\"./images/bells.png\"); \n    background-repeat: no-repeat;\n    position: absolute;\n    background-size: 110px;\n    top:-20px;\n    left: -40px;\n    height: 130px;\n    width: 110px;\n\n    @media (min-width: 768px) {\n      background-image: url(\"./images/bells_desktop.png\"); \n      background-size: 15vw; \n      top:-2.4vw;\n      left: -10vw;\n      height: 18vw; \n      width: 15vw; \n    }\n  }\n\n  @media (min-width: 500px) {\n    width: 28em;\n    padding: 0.5em 0.5em 0.5em 3em;\n  }\n\n  @media (min-width: 768px) {\n    width: 24em;\n    font-size: 1.6vw;\n    line-height: 2vw;\n    padding: 0.5em 0.5em 0.5em 2.2em;\n\n    span {\n      font-size: 0.75em;\n    }\n  }\n`\n\nexport const subTextRed = css`\n  color: ${RED};\n  width: 100%;\n  margin: 11em auto 1em;\n  font-size: 0.9em;\n\n  @media (min-width: 360px) {\n    margin: 0 auto 11em;\n  }\n\n  @media (min-width: 400px) {\n    margin: 0 auto 12em;\n  }\n\n  @media (min-width: 480px) {\n    font-size: 1.1em;\n    width: 28em;\n  }\n\n  @media (min-width: 768px) {\n    width: 50vw;\n    font-size: 1.7vw;\n    line-height: 2vw;\n    margin: 0 auto 26vw;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 0.9em;\n\n  @media (min-width: 500px) {\n    width: 32em;\n  }\n`\n\nexport const h1 = css`\n  color: ${RED};\n  font-size: 2.2em;\n  font-family: 'Fondamento', cursive;\n  margin: 2vw auto 0;\n  overflow: hiddlen;\n  white-space: nowrap;\n\n  @media (min-width: 400px) {\n    font-size: 2.8em;\n  }\n\n  @media (min-width: 500px) {\n    font-size: 4em;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 7vw;\n  }\n`\n\nexport const car = css`\n  background-image: url(\"./images/truck_new.png\"); \n  background-repeat: no-repeat;\n  height: 179px;\n  width: 300px;\n  margin: 0 auto;\n`\n","import React from 'react'\nimport TreesForm from './treesForm'\nimport * as styles from './styles'\n\nconst PrimaryLayout = () => (\n  <div className={styles.pageWpap}>\n  {/* <a className=\"facebook\" href=\"https://www.facebook.com/Jinglesxmt\" target=\"_blank\" rel=\"noopener noreferrer\">Follow us</a> */}\n    <div className={styles.specialOffer}>\n      Standard Tree with Cinco stand for $154\n      <br/>\n      <span>including delivery in Melbourne Area during the week.</span>\n    </div>\n    <h1 className={styles.h1}>\n      Jingles Xmas Trees\n    </h1>\n    <div className={styles.subTextRed}>\n      Are you looking for a real Christmas tree to make your Christmas spectacular? You just found it! Save with our special offer.\n    </div>\n    <div className={styles.subTextGreen}>\n      Our trees are sustainably grown on a farm in Dalesford (VIC).\n      With delivery, setup and disposal, you get it all covered.\n    </div>\n    <TreesForm></TreesForm>\n    <div className={styles.car}></div>\n    <div className={styles.subTextGreen}>\n      Delivery starts in December. Additional area surcharge may apply for remote suburbs and CBD.\n    </div>\n  </div>\n)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: undefined\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ done: true })\n    }, 200);\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.done ? (\n          <PrimaryLayout />\n        ) : (\n          <h1 className=\"loading\">Jingles Xmas Trees</h1>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'react-dates/initialize'\nimport 'react-dates/lib/css/_datepicker.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}