{"version":3,"sources":["treesForm/trees.js","colorConsts.js","treesForm/treeTile/styles.js","treesForm/treeTile/index.js","treesForm/checkbox/styles.js","treesForm/checkbox/index.js","treesForm/datesField/styles.js","treesForm/datesField/index.js","treesForm/postCodeInput/styles.js","treesForm/postCodeInput/index.js","treesForm/styles.js","treesForm/additionalItems.js","treesForm/index.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["TREES","name","height","price","selected","RED","CTA","treeTile","css","_templateObject","activeClass","_templateObject2","bigTree","_templateObject3","title","_templateObject4","hr","_templateObject5","TreeTile","_ref","_classNames","_ref$tree","tree","selectTree","_tree$height","_tree$price","tilesClasses","classNames","Object","defineProperty","styles","react_default","a","createElement","Fragment","className","onClick","concat","input","styles_templateObject","Checkbox","_ref$type","type","_ref$checked","checked","_ref$disabled","disabled","onChange","datesField_styles_templateObject","calendar","styles_templateObject2","DatesField","props","_this","classCallCheck","this","_super","call","isBlocked","day","some","date","isSame","state","focused","onDateChange","bind","assertThisInitialized","onFocusChange","setState","_this$state","react_dates","numberOfMonths","initialVisibleMonth","moment","isDayBlocked","noNavButtons","phrases","calendarLabel","hideKeyboardShortcutsPanel","React","Component","postcode","postCodeInput_styles_templateObject","label","postCodeInput_styles_templateObject2","PostCodeInput","handleChange","event","number","Number","target","value","isNaN","valid","cbdSurcharge","pattern","maxLength","minLength","placeholder","PureComponent","tilesWpap","treesForm_styles_templateObject","checkboxesWpap","treesForm_styles_templateObject2","checkboxLabel","styles_templateObject3","styles_templateObject4","h2","styles_templateObject5","boxWpap","_templateObject6","cta","_templateObject7","ADDITIONAL_ITEMS","key","TreesForm","defaultTree","defaultAdditionalSelection","trees","selectedTree","checkedItemsSet","Set","disabledItemsSet","total","onSubmit","_this2","map","item","objectSpread2","getTotal","treePrice","_ref$treePrice","_ref$checkedItems","checkedItems","toConsumableArray","reduce","sum","currentValue","e","_this3","_e$target","itemName","isChecked","find","i","add","delete","updateInstallation","installation","preventDefault","console","log","fetch","method","body","JSON","stringify","then","response","json","_this4","_this$state2","treesList","treesForm_treeTile","checkboxes","treesForm_checkbox","has","postCodeInput_PostCodeInput","datesField_DatesField","pageWpap","src_styles_templateObject","specialOffer","src_styles_templateObject2","subTextRed","src_styles_templateObject3","subTextGreen","src_styles_templateObject4","h1","src_styles_templateObject5","car","styles_templateObject6","PrimaryLayout","treesForm","App","done","undefined","setTimeout","App_PrimaryLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39d42574.chunk.js","sourcesContent":["export const STANDARD_TREE_NAME = 'Standard'\nexport const LARGE_TREE_NAME = 'Large'\n\nexport const TREES = [{\n        name: STANDARD_TREE_NAME,\n        height: '1.8m',\n        price: 89,\n        selected: true,\n    },{\n        name: LARGE_TREE_NAME,\n        height: '2.1m',\n        price: 129,\n    }]","export const RED = '#ff1212'\nexport const PALE_GREEN = '#f4f5eb'\nexport const CTA = '#6e9366'\nexport const DARK_GREEN = '#2b4432'\nexport const YELLOW = '#ffffa5'\n\n","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const treeTile = css`\n  width: 46%;\n  background-color: #fdecd3;\n  padding: .5em 0 .5em 2.6em;\n  box-sizing: border-box;\n  border-radius: 6px;\n  box-shadow: 2px 2px 2px #ddd;\n  text-align: center;\n  font-size: 0.6em;\n  margin: 0.5em;\n\n  background-image: url(\"./images/tree_card.png\"); \n  background-repeat: no-repeat;\n  background-size: 3.1em;\n  background-position: left 1em bottom .8em;\n\n  @media (min-width: 375px) {\n    font-size: 0.8em;\n  }\n\n  @media (min-width: 768px) {\n    width: 300px;\n    margin: 1em;\n  }\n`\n\nexport const activeClass = css`\n  border: 1px solid ${RED};\n`\n\nexport const bigTree = css`\n  background-size: 3.6em;\n`\n\nexport const title = css`\n  color: ${RED};\n  font-weight: 500;\n\n  font-size: 16px;\n\n  @media (min-width: 375px) {\n    font-size: 18px;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 1.5em;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n  margin: 0 20px;\n\n  @media (min-width: 375px) {\n    margin: 0 40px;\n  }\n\n  @media (min-width: 768px) {\n    margin: 0 4em;\n  }\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport * as trees from '../trees'\nimport * as styles from './styles'\n\nexport const TreeTile = ({ tree = {}, selectTree }) => {\n\n  const {\n    name,\n    height = '',\n    price = '',\n    selected,\n  } = tree\n\n  let tilesClasses = classNames({\n    [styles.treeTile] : true,\n    [styles.activeClass] : !!selected,\n    [styles.bigTree]: name === trees.LARGE_TREE_NAME,\n  })\n\n  return (\n    <>\n      <div className={tilesClasses} \n          onClick={() => {selectTree(tree)}}\n      >\n        <div className={styles.title}>{name}</div>\n        <div>{height}</div>\n        <hr className={styles.hr}/>\n        <div>{`$${price}`}</div>\n      </div>\n    </>\n  )\n}\n\nexport default TreeTile\n\nTreeTile.propTypes = {\n  tree: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  selectTree: PropTypes.func,\n}\n","import { css } from 'emotion'\n\nexport const input = css`\n  margin-right: 0.4em;\n`\n\n","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as styles from './styles'\n\nconst Checkbox = ({ \n  type = 'checkbox', \n  name, \n  checked = false, \n  disabled = false,\n  onChange \n}) => { \n  return (\n    <input \n      className={styles.input}\n      type={type} \n      name={name} \n      checked={checked} \n      disabled={disabled}\n      onChange={onChange} \n    />\n  )\n}\n\n\nCheckbox.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n}\n\nexport default Checkbox","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const datesSelect = css`\n  border: 1px solid ${CTA};\n  color: ${RED} !important;\n  line-height: 1.3;\n  padding: .6em 1.4em .5em .8em;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border: 1px solid #aaa;\n  box-shadow: 0 1px 0 1px rgba(0,0,0,.04);\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 80%;\n    max-width: 80%;\n  }\n\n`\n\nexport const calendar = css`\n  \n    td.CalendarDay__selected, \n    td.CalendarDay__selected:active, \n    td.CalendarDay__selected:hover {\n        border: 1px double ${CTA} !important;\n        background: ${CTA} !important;\n    }\n\n    .DayPicker {\n        margin: 0 auto;\n    }\n\n    margin: 20px auto;\n    text-align: center;\n`\n\n\n","\nimport React from 'react'\n// import PropTypes from 'prop-types'\n// import * as trees from '../trees'\nimport { DayPickerSingleDateController } from 'react-dates'\nimport moment from 'moment'\nimport * as styles from './styles'\n\nexport default class DatesField extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: null,\n      focused: true,\n    }\n\n    this.onDateChange = this.onDateChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n    // state = {\n    //   options: [\n    //     {\n    //       name: 'Delivery Date…',\n    //       value: null,\n    //     },\n    //     {\n    //       name: 'Saturday, 5 Dec',\n    //       value: 5,\n    //     },\n    //     {\n    //       name: 'Sunday, 6 Dec',\n    //       value: 6,\n    //     },\n    //     {\n    //       name: 'Saturday, 12 Dec',\n    //       value: 12,\n    //     },\n    //     {\n    //       name: 'Sunday, 13 Dec',\n    //       value: 13,\n    //     },\n    //     {\n    //       name: 'Saturday, 19 Dec',\n    //       value: 19,\n    //     },\n    //     {\n    //       name: 'Sunday, 20 Dec',\n    //       value: 20,\n    //     },\n    //   ],\n    //   value: null,\n    // }\n\n\n    // handleChange = (event) => {\n    //   this.setState({ value: event.target.value })\n    // }\n\n    onDateChange(date) {\n      this.setState({ date });\n    }\n  \n    onFocusChange() {\n      // Force the focused states to always be truthy so that date is always selectable\n      this.setState({ focused: true });\n    }\n\n// 1-2 December (week)\n// 5-6 December (weekend)\n// 8-9 December (week)\n// 12-13 December (weekend)\n// 15-16 December (week)\n// 19-20 December (weekend)\n\n    isBlocked = day => {\n      const availableDates = [1,2,5,6,8,9,12,13,15,16,19,20]\n      const result = !availableDates.some(date => {\n        return day.isSame(`2020-12-${date}`, 'day')\n      })\n      return result\n    }\n    \n    // https://github.com/airbnb/react-dates/blob/master/stories/DayPickerSingleDateController.js\n\n    render() {\n      const { focused, date } = this.state\n  \n      return (\n        <div className={styles.calendar}>\n          {/* <select \n            onChange={this.handleChange} \n            value={value}\n            className={styles.datesSelect}>\n            {options.map(item => (\n              <option key={item.value} value={item.value}>\n                {item.name}\n              </option>\n            ))}\n          </select> */}\n          <DayPickerSingleDateController\n            numberOfMonths={1} \n            focused={focused}\n            date={date}\n            initialVisibleMonth={() => moment('12 2020', 'MM YYYY')}\n            isDayBlocked={this.isBlocked}\n            noNavButtons={true}\n            phrases={{calendarLabel: 'Delivery Date'}}\n            hideKeyboardShortcutsPanel={true}\n            onDateChange={this.onDateChange}\n            onFocusChange={this.onFocusChange}\n          />\n          \n        </div>\n      );\n    }\n  }\n  ","import { css } from 'emotion'\nimport { RED, CTA } from '../../colorConsts'\n\nexport const postcode = css`\n  border: 1px solid ${CTA};\n  \n  line-height: 1.3em;\n  padding: .6em 1.4em .5em .8em;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 6em;\n    max-width: 80%;\n  }\n\n`\n\nexport const label = css`\n  color: ${RED};\n  padding: .6em .8em;\n  box-sizing: border-box;\n  margin: 0 auto 1em;\n  border-radius: .5em;\n\n  @media (min-width: 768px) {\n    width: 6em;\n    font-size: 1.2em;\n    line-height: 2em;\n  }\n\n`\n\n\n","\nimport React, { PureComponent } from 'react'\nimport * as styles from './styles'\n\nexport default class PostCodeInput extends PureComponent {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      value: null,\n      valid: true,\n      cbdSurcharge: false,\n    }\n  }\n\n    handleChange = (event) => {\n      const number = Number(event.target.value)\n      if (isNaN(number)) {\n        return\n      } \n      const valid = (number/1000 | 0) === 3\n\n      const cbdSurcharge = valid && number <= 3008\n\n      this.setState({ \n        value: event.target.value,\n        valid,\n        cbdSurcharge,\n      })\n    }\n  \n    render() {\n      const { valid } = this.state\n  \n      return (\n        <>\n        <label className={styles.label}>Postcode</label>\n        <input \n          className={styles.postcode}\n          type=\"text\" pattern=\"[0-9]{4}\"\n          maxLength={4} minLength={4}\n          placeholder=\"3000\"\n          name=\"title\" value={this.state.value} \n          onChange={this.handleChange.bind(this)}\n          />\n        {!valid && <p>Please enter a valid Victorian postcode.</p>}\n        </>\n      );\n    }\n  }\n  ","import { css } from 'emotion'\nimport { RED, PALE_GREEN, CTA } from '../colorConsts'\n\nexport const tilesWpap = css`\n  padding: 8px 0;\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n\n  @media (min-width: 768px) {\n\n  }\n`\n\nexport const checkboxesWpap = css`\n  margin: 0 auto 1em;\n  text-align: left;\n  width: 11em;\n\n  @media (min-width: 420px) {\n    width: 9em;\n  }\n`\n\nexport const checkboxLabel = css`\n  color: ${RED};\n  overflow: visible;\n  white-space: nowrap;\n  font-size: 1.2em;\n  line-height: 1.8em;\n\n  span {\n    color: #666;\n  }\n\n`\n\nexport const hr = css`\n  border: 0;\n  height: 0;\n  border-top: 1px solid ${CTA};\n  border-bottom: 1px solid ${CTA};\n`\n\n\nexport const h2 = css`\n  color: ${CTA};\n  text-transform: none;\n  line-height: 2em;\n  margin: 0;\n  font-weight: 500;\n\n`\n\nexport const boxWpap = css`\n  padding: 1em;\n  text-align: center;\n  border: 1px solid green;\n  background-color: ${PALE_GREEN};\n  margin: 1em auto 0;\n\n  @media (min-width: 768px) {\n    width: 500px;\n  }\n  \n`\n\nexport const cta = css`\n  width: 100%;\n  margin: 0.4em auto 0;\n  background-color: ${CTA};\n  font-size: 1em;\n\n  :active, :hover, :visited, :focus{\n    background-color: ${CTA};\n  }\n\n  @media (min-width: 768px) {\n    width: 12em;\n    margin: 1em auto 0;\n  }\n`\n","\nexport const ADDITIONAL_ITEMS = [{\n        name: 'cincostand',\n        key: 'cincostand',\n        label: 'Cinco Stand',\n        price: 40,\n      },\n      {\n        name: 'installation',\n        key: 'installation',\n        label: 'Installation',\n        price: 20,\n      },\n      {\n        name: 'wateringkit',\n        key: 'wateringkit',\n        label: 'Watering Kit',\n        price: 25,\n      },\n      {\n        name: 'disposal',\n        key: 'disposal',\n        label: 'Disposal',\n        price: 15,\n      },\n]","import React from 'react'\nimport TreeTile from './treeTile'\nimport Checkbox from './checkbox'\nimport DatesField from './datesField'\nimport PostCodeInput from './postCodeInput'\nimport * as styles from './styles'\nimport { TREES } from './trees'\nimport { ADDITIONAL_ITEMS } from './additionalItems'\n\nclass TreesForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    const defaultTree = TREES[0] || {}\n    const defaultAdditionalSelection = ADDITIONAL_ITEMS[0] || {}\n\n    this.state = {\n      trees: TREES,\n      selectedTree: defaultTree,\n      checkedItemsSet: new Set([defaultAdditionalSelection]),\n      disabledItemsSet: new Set(),\n      total: defaultTree.price + defaultAdditionalSelection.price,\n    }\n    this.selectTree = this.selectTree.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  selectTree(tree) {\n    this.setState(state => {\n      const trees = state.trees.map(item => {\n        return {...item, selected: item.name === tree.name}\n      })\n      return {\n        ...state, \n        trees: trees, \n        selectedTree : tree,\n        total: this.getTotal({treePrice:tree.price}) \n      }\n    })\n  }\n\n  getTotal({\n    treePrice = this.state.selectedTree.price, \n    checkedItems = [...this.state.checkedItemsSet]\n  }) {\n    const additinalItemsPrice = checkedItems.reduce(\n      (sum, currentValue) => sum + currentValue.price , 0\n    )\n    return treePrice + additinalItemsPrice\n  }\n\n  handleChange(e) {\n    const { checkedItemsSet, disabledItemsSet } = this.state\n    const { name : itemName , checked : isChecked} = e.target\n\n    const item = ADDITIONAL_ITEMS.find(i => i.name === itemName)\n\n    if (!isChecked) {\n      checkedItemsSet.delete(item)\n    } else {\n      checkedItemsSet.add(item)\n    }\n    this.updateInstallation(isChecked, itemName, checkedItemsSet, disabledItemsSet)\n\n    this.setState((state) => ({ \n      ...state,\n      checkedItemsSet,\n      total: this.getTotal({checkedItems:  [...checkedItemsSet]}),\n    }));\n  }\n\n  updateInstallation(isChecked, itemName, checkedItemsSet, disabledItemsSet) {\n    if (itemName !== 'cincostand') { \n      return \n    }\n    const installation = ADDITIONAL_ITEMS.find(i => i.name === 'installation')\n    if (isChecked) {\n      disabledItemsSet.delete(installation)\n    } else {\n      checkedItemsSet.delete(installation)\n      disabledItemsSet.add(installation)\n    }\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    console.log(\"submit\");\n\n    fetch('https://your-node-server-here.com/api/submit-cart', {\n        method: 'POST',\n        body: JSON.stringify({tree: this.state.selectedTree.name})\n      }).then(function(response) {\n        console.log(response)\n        return response.json();\n      });\n}\n\n  render() {\n    const { trees, total, checkedItemsSet, disabledItemsSet } = this.state\n\n    const treesList = trees.map(tree => (\n      <TreeTile tree={tree} key={tree.name} selectTree={this.selectTree}/>\n    ))\n\n    const checkboxes = ADDITIONAL_ITEMS.map(item => (\n        <div key={item.key}>\n          <label className={styles.checkboxLabel}>\n            <Checkbox \n              name={item.name} \n              checked={checkedItemsSet.has(item)} \n              disabled={disabledItemsSet.has(item)} \n              onChange={this.handleChange} \n            />\n            {item.label} <span>{`+$${item.price}`}</span>\n          </label>\n        </div>\n      ))\n    \n\n    return (\n      <form \n        className={styles.boxWpap} \n        method=\"post\"     \n        onSubmit={this.onSubmit}\n      >\n        <h2 className={styles.h2}>Order now</h2>\n        <hr className={styles.hr}/>\n        <div className={styles.tilesWpap}>\n          {treesList}\n        </div>\n        <div className={styles.checkboxesWpap}>\n          {checkboxes}\n        </div>\n        <PostCodeInput />\n        <DatesField />\n        <hr className={styles.hr}/>\n        <button className={styles.cta}>\n            {`Buy for $${total}`}\n        </button>\n      </form>\n    )\n  }\n}\n\n\n\nexport default TreesForm\n\nTreesForm.propTypes = {\n\n}\n","import { css } from 'emotion'\nimport { RED, DARK_GREEN, YELLOW } from './colorConsts'\n\nexport const pageWpap = css`\n  &&& {\n    @media (min-width: 768px) {\n      font-size: 20px;\n      line-height: 26px;\n    }\n  }\n  padding: 20px;\n  text-align: center;\n  width: 100%;\n  background-image: url(\"./images/mobile_bg.png\"); \n  background-repeat: no-repeat;\n  background-size: 100%;\n\n  @media (min-width: 600px) {\n   background-image: url(\"./images/bg.png\"); \n  }\n`\n\nexport const specialOffer = css`\n  color: ${YELLOW};\n  background-color: ${RED};\n  width: 90%;\n  margin: 2vw auto 0;\n  padding: 0.4em 0.4em 0.4em 4em;\n  font-size: 0.8em;\n  line-height: 1.2em;\n  border: 1px solid #fff;\n  position: relative;\n\n  ::after {\n    content: \"\";\n    background-image: url(\"./images/bells.png\"); \n    background-repeat: no-repeat;\n    position: absolute;\n    background-size: 110px;\n    top:-20px;\n    left: -40px;\n    height: 130px;\n    width: 110px;\n\n    @media (min-width: 768px) {\n      background-image: url(\"./images/bells_desktop.png\"); \n      background-size: 15vw; //200px;\n      top:-2.4vw;\n      left: -10vw;\n      height: 18vw; \n      width: 15vw; \n    }\n  }\n\n  @media (min-width: 500px) {\n    width: 28em;\n    padding: 0.5em 0.5em 0.5em 3em;\n  }\n\n  @media (min-width: 768px) {\n    width: 24em;\n    font-size: 1.6vw;\n    line-height: 2vw;\n    padding: 0.5em 0.5em 0.5em 2.2em;\n  }\n`\n\nexport const subTextRed = css`\n  color: ${RED};\n  width: 100%;\n  margin: 0 auto 11em;\n  font-size: 0.9em;\n\n  @media (min-width: 500px) {\n    width: 28em;\n  }\n\n  @media (min-width: 768px) {\n    width: 50vw;\n    font-size: 1.7vw;\n    line-height: 2vw;\n    margin: 0 auto 26vw;\n  }\n`\n\nexport const subTextGreen = css`\n  color: ${DARK_GREEN};\n  width: 100%;\n  margin: 1em auto 0;\n  font-size: 0.9em;\n\n  @media (min-width: 500px) {\n    width: 32em;\n  }\n`\n\nexport const h1 = css`\n  color: ${RED};\n  font-size: 2.2em;\n  font-family: 'Fondamento', cursive;\n  margin: 2vw auto 0;\n  overflow: hiddlen;\n  white-space: nowrap;\n\n  @media (min-width: 400px) {\n    font-size: 2.8em;\n  }\n\n  @media (min-width: 500px) {\n    font-size: 4em;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 7vw;\n  }\n`\n\nexport const car = css`\n  background-image: url(\"./images/truck_new.png\"); \n  background-repeat: no-repeat;\n  height: 179px;\n  width: 300px;\n  margin: 0 auto;\n`\n","import React from 'react'\nimport TreesForm from './treesForm'\nimport * as styles from './styles'\n\nconst PrimaryLayout = () => (\n  <div className={styles.pageWpap}>\n  {/* <a className=\"facebook\" href=\"https://www.facebook.com/Jinglesxmt\" target=\"_blank\" rel=\"noopener noreferrer\">Follow us</a> */}\n    <div className={styles.specialOffer}>\n      Standard size tree with Cisco Stand for $129 including delivery to Melbourne Metro Area.\n    </div>\n    <h1 className={styles.h1}>\n      Jingles Xmas Trees\n    </h1>\n    <div className={styles.subTextRed}>\n      Are you looking for a real Christmas tree to make your Christmas spectacular? You just found it! Save with our special offer.\n    </div>\n    <div className={styles.subTextGreen}>\n      Our trees are sustainably grown on a farm in Dalesford (VIC).\n      With delivery, setup and disposal, you get it all covered.\n    </div>\n    <TreesForm></TreesForm>\n    <div className={styles.car}></div>\n    <div className={styles.subTextGreen}>\n      Delivery starts in December with options for weekends. You can select suitable dates on Checkout page. Additional area surcharge may apply for remote suburbs and CBD.\n    </div>\n  </div>\n)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: undefined\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ done: true })\n    }, 200);\n  }\n\n  render() {\n    return (\n      <>\n        {this.state.done ? (\n          <PrimaryLayout />\n        ) : (\n          <h1 className=\"loading\">Jingles Xmas Trees</h1>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'react-dates/initialize'\nimport 'react-dates/lib/css/_datepicker.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}